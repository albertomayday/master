# n8n Workflow Orchestrator para Stakas MVP
# Sistema de automatización completo para viralización del canal UCgohgqLVu1QPdfa64Vkrgeg

version: '3.8'

services:
  # n8n - Workflow Automation Platform
  n8n:
    image: n8nio/n8n:latest
    container_name: stakas-n8n
    ports:
      - "5678:5678"
    environment:
      # Basic Configuration
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=stakas_admin
      - N8N_BASIC_AUTH_PASSWORD=StakasN8N2024!
      
      # Database Configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n_stakas
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=n8n_stakas_2024
      
      # Webhook Configuration
      - WEBHOOK_URL=https://n8n-stakas.railway.app
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      
      # Stakas MVP Specific
      - STAKAS_CHANNEL_ID=UCgohgqLVu1QPdfa64Vkrgeg
      - STAKAS_META_BUDGET=500
      - STAKAS_TARGET_AUDIENCE=drill_rap_espanol
      
      # Integration Tokens
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - RAILWAY_TOKEN=${RAILWAY_TOKEN}
      - DOCKERHUB_TOKEN=${DOCKERHUB_TOKEN}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - META_ACCESS_TOKEN=${META_ACCESS_TOKEN}
      - DISCORD_WEBHOOK=${DISCORD_WEBHOOK_URL}
      
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
      - ./n8n/credentials:/home/node/.n8n/credentials
    depends_on:
      - postgres
      - redis
    networks:
      - stakas-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL para n8n y datos del sistema
  postgres:
    image: postgres:15-alpine
    container_name: stakas-postgres-n8n
    environment:
      - POSTGRES_USER=n8n_user
      - POSTGRES_PASSWORD=n8n_stakas_2024
      - POSTGRES_DB=n8n_stakas
      - POSTGRES_NON_ROOT_USER=stakas_user
      - POSTGRES_NON_ROOT_PASSWORD=stakas_db_2024
    volumes:
      - postgres_n8n_data:/var/lib/postgresql/data
      - ./database/n8n_schema.sql:/docker-entrypoint-initdb.d/01-n8n-schema.sql
      - ./database/stakas_schema.sql:/docker-entrypoint-initdb.d/02-stakas-schema.sql
    ports:
      - "5432:5432"
    networks:
      - stakas-network
    restart: unless-stopped

  # Redis para cache y queue management
  redis:
    image: redis:7-alpine
    container_name: stakas-redis-n8n
    command: redis-server --requirepass stakas_redis_2024 --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_n8n_data:/data
    networks:
      - stakas-network
    restart: unless-stopped

  # Stakas MVP Main App
  stakas-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stakas-mvp-main
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - DUMMY_MODE=false
      - CHANNEL_ID=UCgohgqLVu1QPdfa64Vkrgeg
      - N8N_WEBHOOK_URL=http://n8n:5678/webhook
      - DATABASE_URL=postgresql://stakas_user:stakas_db_2024@postgres:5432/n8n_stakas
      - REDIS_URL=redis://:stakas_redis_2024@redis:6379/0
    depends_on:
      - n8n
      - postgres
      - redis
    networks:
      - stakas-network
    restart: unless-stopped

volumes:
  n8n_data:
    driver: local
  postgres_n8n_data:
    driver: local
  redis_n8n_data:
    driver: local

networks:
  stakas-network:
    driver: bridge
    name: stakas_n8n_network