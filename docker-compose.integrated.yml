version: '3.8'

networks:
  tiktok-ml-network:
    driver: bridge

volumes:
  device_farm_data:
  ml_models:
  grafana_data:
  supabase_data:

services:
  # ========== DEVICE FARM V5 SERVICES ==========
  
  device-farm-v5:
    build:
      context: ./device_farm_v5
      dockerfile: Dockerfile
    container_name: device-farm-v5
    privileged: true
    restart: unless-stopped
    networks:
      - tiktok-ml-network
    ports:
      - "5000:5000"  # Dashboard
      - "4723-4732:4723-4732"  # Appium ports
    volumes:
      - device_farm_data:/app/data
      - ./device_farm_v5/logs:/app/logs
      - /dev/bus/usb:/dev/bus/usb:rw
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DUMMY_MODE=false
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - GOLOGIN_API_TOKEN=${GOLOGIN_API_TOKEN}
      - DEVICE_FARM_API_KEY=${DEVICE_FARM_API_KEY}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
    depends_on:
      - ml-api
      - grafana
      - n8n
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    devices:
      - /dev/bus/usb:/dev/bus/usb

  # ========== EXISTING ML V4 SERVICES (Enhanced) ==========
  
  ml-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.ml-api
    container_name: tiktok-ml-api
    restart: unless-stopped
    networks:
      - tiktok-ml-network
    ports:
      - "8000:8000"
    volumes:
      - ml_models:/app/data/models
      - ./data:/app/data
      - ./config:/app/config
      - ./logs:/app/logs
    environment:
      - DUMMY_MODE=false
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEVICE_FARM_INTEGRATION=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Supabase (Enhanced for Device Farm integration)
  supabase:
    image: supabase/postgres:15.1.0.117
    container_name: supabase-postgres
    restart: unless-stopped
    networks:
      - tiktok-ml-network
    ports:
      - "5432:5432"
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=tiktok_ml_v4
      - POSTGRES_USER=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # n8n Workflow Automation (Enhanced)
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-automation
    restart: unless-stopped
    networks:
      - tiktok-ml-network
    ports:
      - "5678:5678"
    volumes:
      - ./orchestration/n8n_workflows:/home/node/.n8n
      - ./data:/app/data
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - WEBHOOK_URL=http://localhost:5678
      - ML_API_URL=http://ml-api:8000
      - DEVICE_FARM_URL=http://device-farm-v5:5000
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    depends_on:
      - ml-api
      - device-farm-v5

  # Grafana Monitoring (Enhanced)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-monitoring
    restart: unless-stopped
    networks:
      - tiktok-ml-network
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards/grafana:/etc/grafana/provisioning/dashboards
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    depends_on:
      - supabase

  # Redis for caching and task queuing
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    networks:
      - tiktok-ml-network
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    command: redis-server --appendonly yes

  # ========== NEW INTEGRATION SERVICES ==========
  
  # API Gateway for unified access
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    restart: unless-stopped
    networks:
      - tiktok-ml-network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      - ./data/ssl:/etc/ssl/certs
    depends_on:
      - ml-api
      - device-farm-v5
      - n8n
      - grafana

  # Analytics Processor (New service for unified analytics)
  analytics-processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.analytics
    container_name: analytics-processor
    restart: unless-stopped
    networks:
      - tiktok-ml-network
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - supabase
      - device-farm-v5
      - ml-api

  # Alert Manager (Enhanced for Device Farm alerts)
  alert-manager:
    build:
      context: .
      dockerfile: docker/Dockerfile.alerts
    container_name: alert-manager
    restart: unless-stopped
    networks:
      - tiktok-ml-network
    environment:
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_USER=${EMAIL_SMTP_USER}
      - EMAIL_SMTP_PASSWORD=${EMAIL_SMTP_PASSWORD}
    depends_on:
      - redis

# ========== HEALTH CHECKS AND MONITORING ==========
  
  # System health monitor
  health-monitor:
    image: prom/node-exporter:latest
    container_name: health-monitor
    restart: unless-stopped
    networks:
      - tiktok-ml-network
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-metrics
    restart: unless-stopped
    networks:
      - tiktok-ml-network
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - health-monitor