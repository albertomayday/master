name: 🚀 Build and Deploy Stakas MVP

on:
  push:
    branches: [ main, completo ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_railway:
        description: 'Deploy to Railway after build'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: stakasmvp/viral-system
  
jobs:
  # ============================================================================
  # JOB 1: Build and Test
  # ============================================================================
  build-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dummy.txt
        pip install pytest pytest-cov
        
    - name: 🧪 Run tests
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html
        
    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # ============================================================================  
  # JOB 2: Security Scan
  # ============================================================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📋 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # JOB 3: Build Docker Image
  # ============================================================================
  docker-build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Stakas MVP Viral System
          org.opencontainers.image.description=TikTok Automation System for Stakas MVP Channel
          org.opencontainers.image.vendor=Stakas MVP Team
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          
    - name: 🔑 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🚀 Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          COMMIT_SHA=${{ github.sha }}

  # ============================================================================
  # JOB 4: Security Scan Docker Image
  # ============================================================================
  docker-security:
    name: 🔒 Docker Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: 🔍 Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.docker-build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
        
    - name: 📋 Upload image scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # ============================================================================
  # JOB 5: Deploy to Railway (Optional)
  # ============================================================================
  deploy-railway:
    name: 🚄 Deploy to Railway
    runs-on: ubuntu-latest
    needs: [docker-build, docker-security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/completo' || github.event.inputs.deploy_to_railway == 'true'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚄 Deploy to Railway
      uses: railwayapp/railway-deploy@v1
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: stakas-mvp-viral-system
        
    - name: ✅ Deployment notification
      if: success()
      run: |
        echo "🎉 Deployment successful!"
        echo "🌐 App URL: https://stakas-mvp-viral-system.railway.app"
        
    - name: ❌ Deployment failure notification
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        exit 1

  # ============================================================================
  # JOB 6: Notification
  # ============================================================================
  notification:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [docker-build, deploy-railway]
    if: always()
    
    steps:
    - name: 📢 Discord notification
      if: always()
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
      with:
        args: |
          🎵 **Stakas MVP Build Status**
          
          📦 **Build**: ${{ needs.docker-build.result == 'success' && '✅ Success' || '❌ Failed' }}
          🚄 **Deploy**: ${{ needs.deploy-railway.result == 'success' && '✅ Success' || needs.deploy-railway.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
          🔗 **Commit**: [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          👤 **Author**: ${{ github.actor }}
          
          ${{ needs.docker-build.result == 'success' && needs.deploy-railway.result == 'success' && '🌐 **Live**: https://stakas-mvp-viral-system.railway.app' || '' }}
          
    - name: 📊 Job summary
      run: |
        echo "## 🎵 Stakas MVP Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY  
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Test | ${{ needs.build-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Railway Deploy | ${{ needs.deploy-railway.result == 'success' && '✅' || needs.deploy-railway.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📦 **Image**: \`${{ needs.docker-build.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "🏷️ **Digest**: \`${{ needs.docker-build.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY