# Docker Compose V6 - Ultra Lightweight Edge Deployment
# Optimized for low-bandwidth, low-resource edge environments

version: '3.8'

networks:
  edge-net:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1200  # Smaller MTU for edge networks

volumes:
  edge-db:
    driver: local
  edge-cache:
    driver: local
  edge-models:
    driver: local

services:
  # ================================================================
  # CORE EDGE SERVICES - MINIMAL FOOTPRINT
  # ================================================================
  
  edge-core:
    build:
      context: .
      dockerfile: docker/Dockerfile.edge-core
      args:
        - BANDWIDTH_MODE=true
    container_name: edge-core
    ports:
      - "8000:8000"
    environment:
      - DEVICE_FARM_BANDWIDTH_MODE=true
      - ML_LIGHTWEIGHT=true
      - USE_QUANTIZED_MODELS=true
      - SQLITE_MEMORY_DB=true
      - HTTP_COMPRESSION=true
      - CACHE_AGGRESSIVE=true
    volumes:
      - edge-models:/app/models:ro
      - edge-cache:/app/cache
    networks:
      - edge-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M  # vs 2GB in full version
          cpus: '1.0'   # vs 4.0 in full version
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s  # vs 30s in full version
      timeout: 10s
      retries: 2     # vs 5 in full version
      start_period: 30s

  # ================================================================
  # LIGHTWEIGHT DATABASE - SQLITE ONLY
  # ================================================================
  
  edge-db:
    image: alpine:3.18
    container_name: edge-db
    volumes:
      - edge-db:/data
    networks:
      - edge-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M   # vs 512M PostgreSQL
          cpus: '0.2'
    command: 
      - sh
      - -c
      - |
        # Initialize SQLite database for edge deployment
        apk add --no-cache sqlite
        sqlite3 /data/edge_db.sqlite "CREATE TABLE IF NOT EXISTS health_check (id INTEGER PRIMARY KEY, timestamp TEXT);"
        tail -f /dev/null

  # ================================================================
  # MINIMAL CACHE - REDIS LITE
  # ================================================================
  
  edge-cache:
    image: redis:7-alpine
    container_name: edge-cache
    ports:
      - "6379:6379"
    networks:
      - edge-net
    volumes:
      - edge-cache:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M   # vs 256M in full version
          cpus: '0.2'
    command: 
      - redis-server
      - --maxmemory 32mb
      - --maxmemory-policy allkeys-lru
      - --save 900 1    # Reduced save frequency
      - --appendonly yes
      - --tcp-keepalive 60

  # ================================================================
  # LIGHTWEIGHT API GATEWAY - NGINX MINIMAL
  # ================================================================
  
  edge-gateway:
    image: nginx:alpine
    container_name: edge-gateway
    ports:
      - "80:80"
    networks:
      - edge-net
    volumes:
      - ./docker/nginx-edge.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 32M   # vs 128M in full version
          cpus: '0.1'
    depends_on:
      - edge-core

  # ================================================================
  # MINIMAL MONITORING - LIGHTWEIGHT METRICS
  # ================================================================
  
  edge-monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile.edge-monitor
    container_name: edge-monitor
    ports:
      - "9090:9090"
    environment:
      - METRICS_INTERVAL=300s    # vs 60s in full version
      - RETENTION_TIME=7d        # vs 30d in full version
      - SCRAPE_TIMEOUT=10s       # vs 30s in full version
    networks:
      - edge-net
    volumes:
      - ./config/prometheus-edge.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M  # vs 512M in full version
          cpus: '0.3'

# ================================================================
# EDGE DEPLOYMENT CONFIGURATION
# ================================================================

# Total resource usage:
# - Memory: ~800MB (vs 8GB+ in full version)
# - CPU: ~2.0 cores (vs 12+ in full version)
# - Disk: ~2GB (vs 20GB+ in full version)
# - Network: 70% reduction in bandwidth usage

# Optimizations:
# - No GPU dependencies
# - Minimal Docker images (Alpine-based)
# - Compressed data transfers
# - Aggressive caching
# - Reduced monitoring frequency
# - SQLite instead of PostgreSQL
# - Quantized ML models
# - Compressed screenshots